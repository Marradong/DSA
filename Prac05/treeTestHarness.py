import tree

def __main__():
    print("Testing DSABinary Tree")
    DSATree = tree.DSABinarySearchTree()
    print("\nInserting value = a with key = 4")
    DSATree.insert(4,"a")
    print("Inserting value = b with key = 2")
    DSATree.insert(2,"b")
    print("Inserting value = c with key = 6")
    DSATree.insert(6,"c")
    print()
    DSATree.display()
    print()
    print("Max: ", str(DSATree.max()))
    print("Min: ", str(DSATree.min()))
    print("Height: ", str(DSATree.height()))
    print()
    print("Inserting value = d with key = 1")
    DSATree.insert(1,"d")
    print("Inserting value = e with key = 3")
    DSATree.insert(3,"e")
    print()
    DSATree.display()
    print()
    print("Balance: ", str(DSATree.balance()))
    print()
    print("Inserting value = f with key = 5")
    DSATree.insert(5,"f")
    print("Inserting value = g with key = 7")
    DSATree.insert(7,"g")
    print()
    DSATree.display()
    print()
    print("Balance: ", str(DSATree.balance()))
    print("Max: ", str(DSATree.max()))
    print("Min: ", str(DSATree.min()))
    print("Height: ", str(DSATree.height()))
    print()
    print("In Order Traversal (Value:Key): ", end=" ")
    print(str(DSATree.inorder()))
    print("Pre Order Traversal (Value:Key): ", end=" ")
    print(str(DSATree.preorder()))
    print("Post Order Traversal (Value:Key): ", end=" ")
    print(str(DSATree.postorder()))
    print()
    print("Find value of key (5): ", DSATree.find(5))
    print("Find value of key (4): ", DSATree.find(4))
    print()
    print("Delete item with 2 children (b)")
    DSATree.delete(2)
    print()
    DSATree.display()
    print()
    print("Delete item with no children (g)")
    DSATree.delete(7)
    print()
    DSATree.display()
    print()
    print("Delete item with one child (c)")
    DSATree.delete(6)
    print()
    DSATree.display()
    print()



if __name__ == "__main__":
    __main__()